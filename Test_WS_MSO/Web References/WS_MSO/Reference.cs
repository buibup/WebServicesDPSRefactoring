//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Test_WS_MSO.WS_MSO {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Service1Soap", Namespace="http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback WS_GetProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_GetJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_GetAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_GetBankInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_GetMedical_PlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_GetPhoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_InsertCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_InsertResuscitativeOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_CountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_InsertOrientationOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_InsertCMEOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_InsertMOCOperationCompleted;
        
        private System.Threading.SendOrPostCallback WS_InsertMOC2OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = global::Test_WS_MSO.Properties.Settings.Default.Test_WS_MSO_WS_MSO_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event WS_GetProfileCompletedEventHandler WS_GetProfileCompleted;
        
        /// <remarks/>
        public event WS_GetJobCompletedEventHandler WS_GetJobCompleted;
        
        /// <remarks/>
        public event WS_GetAddressCompletedEventHandler WS_GetAddressCompleted;
        
        /// <remarks/>
        public event WS_GetBankInfoCompletedEventHandler WS_GetBankInfoCompleted;
        
        /// <remarks/>
        public event WS_GetMedical_PlanCompletedEventHandler WS_GetMedical_PlanCompleted;
        
        /// <remarks/>
        public event WS_GetPhoneCompletedEventHandler WS_GetPhoneCompleted;
        
        /// <remarks/>
        public event WS_InsertCertCompletedEventHandler WS_InsertCertCompleted;
        
        /// <remarks/>
        public event WS_InsertResuscitativeCompletedEventHandler WS_InsertResuscitativeCompleted;
        
        /// <remarks/>
        public event WS_CountryCompletedEventHandler WS_CountryCompleted;
        
        /// <remarks/>
        public event WS_InsertOrientationCompletedEventHandler WS_InsertOrientationCompleted;
        
        /// <remarks/>
        public event WS_InsertCMECompletedEventHandler WS_InsertCMECompleted;
        
        /// <remarks/>
        public event WS_InsertMOCCompletedEventHandler WS_InsertMOCCompleted;
        
        /// <remarks/>
        public event WS_InsertMOC2CompletedEventHandler WS_InsertMOC2Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_GetProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable WS_GetProfile(int APP_ID) {
            object[] results = this.Invoke("WS_GetProfile", new object[] {
                        APP_ID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void WS_GetProfileAsync(int APP_ID) {
            this.WS_GetProfileAsync(APP_ID, null);
        }
        
        /// <remarks/>
        public void WS_GetProfileAsync(int APP_ID, object userState) {
            if ((this.WS_GetProfileOperationCompleted == null)) {
                this.WS_GetProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_GetProfileOperationCompleted);
            }
            this.InvokeAsync("WS_GetProfile", new object[] {
                        APP_ID}, this.WS_GetProfileOperationCompleted, userState);
        }
        
        private void OnWS_GetProfileOperationCompleted(object arg) {
            if ((this.WS_GetProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_GetProfileCompleted(this, new WS_GetProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_GetJob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable WS_GetJob() {
            object[] results = this.Invoke("WS_GetJob", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void WS_GetJobAsync() {
            this.WS_GetJobAsync(null);
        }
        
        /// <remarks/>
        public void WS_GetJobAsync(object userState) {
            if ((this.WS_GetJobOperationCompleted == null)) {
                this.WS_GetJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_GetJobOperationCompleted);
            }
            this.InvokeAsync("WS_GetJob", new object[0], this.WS_GetJobOperationCompleted, userState);
        }
        
        private void OnWS_GetJobOperationCompleted(object arg) {
            if ((this.WS_GetJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_GetJobCompleted(this, new WS_GetJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_GetAddress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable WS_GetAddress() {
            object[] results = this.Invoke("WS_GetAddress", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void WS_GetAddressAsync() {
            this.WS_GetAddressAsync(null);
        }
        
        /// <remarks/>
        public void WS_GetAddressAsync(object userState) {
            if ((this.WS_GetAddressOperationCompleted == null)) {
                this.WS_GetAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_GetAddressOperationCompleted);
            }
            this.InvokeAsync("WS_GetAddress", new object[0], this.WS_GetAddressOperationCompleted, userState);
        }
        
        private void OnWS_GetAddressOperationCompleted(object arg) {
            if ((this.WS_GetAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_GetAddressCompleted(this, new WS_GetAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_GetBankInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable WS_GetBankInfo() {
            object[] results = this.Invoke("WS_GetBankInfo", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void WS_GetBankInfoAsync() {
            this.WS_GetBankInfoAsync(null);
        }
        
        /// <remarks/>
        public void WS_GetBankInfoAsync(object userState) {
            if ((this.WS_GetBankInfoOperationCompleted == null)) {
                this.WS_GetBankInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_GetBankInfoOperationCompleted);
            }
            this.InvokeAsync("WS_GetBankInfo", new object[0], this.WS_GetBankInfoOperationCompleted, userState);
        }
        
        private void OnWS_GetBankInfoOperationCompleted(object arg) {
            if ((this.WS_GetBankInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_GetBankInfoCompleted(this, new WS_GetBankInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_GetMedical_Plan", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable WS_GetMedical_Plan() {
            object[] results = this.Invoke("WS_GetMedical_Plan", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void WS_GetMedical_PlanAsync() {
            this.WS_GetMedical_PlanAsync(null);
        }
        
        /// <remarks/>
        public void WS_GetMedical_PlanAsync(object userState) {
            if ((this.WS_GetMedical_PlanOperationCompleted == null)) {
                this.WS_GetMedical_PlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_GetMedical_PlanOperationCompleted);
            }
            this.InvokeAsync("WS_GetMedical_Plan", new object[0], this.WS_GetMedical_PlanOperationCompleted, userState);
        }
        
        private void OnWS_GetMedical_PlanOperationCompleted(object arg) {
            if ((this.WS_GetMedical_PlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_GetMedical_PlanCompleted(this, new WS_GetMedical_PlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_GetPhone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable WS_GetPhone() {
            object[] results = this.Invoke("WS_GetPhone", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void WS_GetPhoneAsync() {
            this.WS_GetPhoneAsync(null);
        }
        
        /// <remarks/>
        public void WS_GetPhoneAsync(object userState) {
            if ((this.WS_GetPhoneOperationCompleted == null)) {
                this.WS_GetPhoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_GetPhoneOperationCompleted);
            }
            this.InvokeAsync("WS_GetPhone", new object[0], this.WS_GetPhoneOperationCompleted, userState);
        }
        
        private void OnWS_GetPhoneOperationCompleted(object arg) {
            if ((this.WS_GetPhoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_GetPhoneCompleted(this, new WS_GetPhoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_InsertCert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int WS_InsertCert(int APP_ID, string DOCTOR_ID, string EMP_ID, string PROFILE_ID, int CERT_TYPE_ID, int CERT_COUNTRY_ID, string CERT_COUNTRY, string CERT_FROM, string CERT_NAME, string CERT_START_DATE, string CERT_EXPIRED_DATE, string CERT_END_DATE, string CERT_VERIFY_STATUS, string CERT_STATUS, string CERT_URL) {
            object[] results = this.Invoke("WS_InsertCert", new object[] {
                        APP_ID,
                        DOCTOR_ID,
                        EMP_ID,
                        PROFILE_ID,
                        CERT_TYPE_ID,
                        CERT_COUNTRY_ID,
                        CERT_COUNTRY,
                        CERT_FROM,
                        CERT_NAME,
                        CERT_START_DATE,
                        CERT_EXPIRED_DATE,
                        CERT_END_DATE,
                        CERT_VERIFY_STATUS,
                        CERT_STATUS,
                        CERT_URL});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void WS_InsertCertAsync(int APP_ID, string DOCTOR_ID, string EMP_ID, string PROFILE_ID, int CERT_TYPE_ID, int CERT_COUNTRY_ID, string CERT_COUNTRY, string CERT_FROM, string CERT_NAME, string CERT_START_DATE, string CERT_EXPIRED_DATE, string CERT_END_DATE, string CERT_VERIFY_STATUS, string CERT_STATUS, string CERT_URL) {
            this.WS_InsertCertAsync(APP_ID, DOCTOR_ID, EMP_ID, PROFILE_ID, CERT_TYPE_ID, CERT_COUNTRY_ID, CERT_COUNTRY, CERT_FROM, CERT_NAME, CERT_START_DATE, CERT_EXPIRED_DATE, CERT_END_DATE, CERT_VERIFY_STATUS, CERT_STATUS, CERT_URL, null);
        }
        
        /// <remarks/>
        public void WS_InsertCertAsync(
                    int APP_ID, 
                    string DOCTOR_ID, 
                    string EMP_ID, 
                    string PROFILE_ID, 
                    int CERT_TYPE_ID, 
                    int CERT_COUNTRY_ID, 
                    string CERT_COUNTRY, 
                    string CERT_FROM, 
                    string CERT_NAME, 
                    string CERT_START_DATE, 
                    string CERT_EXPIRED_DATE, 
                    string CERT_END_DATE, 
                    string CERT_VERIFY_STATUS, 
                    string CERT_STATUS, 
                    string CERT_URL, 
                    object userState) {
            if ((this.WS_InsertCertOperationCompleted == null)) {
                this.WS_InsertCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_InsertCertOperationCompleted);
            }
            this.InvokeAsync("WS_InsertCert", new object[] {
                        APP_ID,
                        DOCTOR_ID,
                        EMP_ID,
                        PROFILE_ID,
                        CERT_TYPE_ID,
                        CERT_COUNTRY_ID,
                        CERT_COUNTRY,
                        CERT_FROM,
                        CERT_NAME,
                        CERT_START_DATE,
                        CERT_EXPIRED_DATE,
                        CERT_END_DATE,
                        CERT_VERIFY_STATUS,
                        CERT_STATUS,
                        CERT_URL}, this.WS_InsertCertOperationCompleted, userState);
        }
        
        private void OnWS_InsertCertOperationCompleted(object arg) {
            if ((this.WS_InsertCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_InsertCertCompleted(this, new WS_InsertCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_InsertResuscitative", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int WS_InsertResuscitative(int APP_ID, string DOCTOR_ID, string PROFILE_ID, string RESUSCITATIVE_SUBJECT, string RESUSCITATIVE_SUBJECTNAME, string RESUSCITATIVE_END_DATE, string RESUSCITATIVE_INSTITUE_NAME, string RESUSCITATIVE_EXPIRED_DATE, string RESUSCITATIVE_STATUS, string RESUSCITATIVE_URL) {
            object[] results = this.Invoke("WS_InsertResuscitative", new object[] {
                        APP_ID,
                        DOCTOR_ID,
                        PROFILE_ID,
                        RESUSCITATIVE_SUBJECT,
                        RESUSCITATIVE_SUBJECTNAME,
                        RESUSCITATIVE_END_DATE,
                        RESUSCITATIVE_INSTITUE_NAME,
                        RESUSCITATIVE_EXPIRED_DATE,
                        RESUSCITATIVE_STATUS,
                        RESUSCITATIVE_URL});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void WS_InsertResuscitativeAsync(int APP_ID, string DOCTOR_ID, string PROFILE_ID, string RESUSCITATIVE_SUBJECT, string RESUSCITATIVE_SUBJECTNAME, string RESUSCITATIVE_END_DATE, string RESUSCITATIVE_INSTITUE_NAME, string RESUSCITATIVE_EXPIRED_DATE, string RESUSCITATIVE_STATUS, string RESUSCITATIVE_URL) {
            this.WS_InsertResuscitativeAsync(APP_ID, DOCTOR_ID, PROFILE_ID, RESUSCITATIVE_SUBJECT, RESUSCITATIVE_SUBJECTNAME, RESUSCITATIVE_END_DATE, RESUSCITATIVE_INSTITUE_NAME, RESUSCITATIVE_EXPIRED_DATE, RESUSCITATIVE_STATUS, RESUSCITATIVE_URL, null);
        }
        
        /// <remarks/>
        public void WS_InsertResuscitativeAsync(int APP_ID, string DOCTOR_ID, string PROFILE_ID, string RESUSCITATIVE_SUBJECT, string RESUSCITATIVE_SUBJECTNAME, string RESUSCITATIVE_END_DATE, string RESUSCITATIVE_INSTITUE_NAME, string RESUSCITATIVE_EXPIRED_DATE, string RESUSCITATIVE_STATUS, string RESUSCITATIVE_URL, object userState) {
            if ((this.WS_InsertResuscitativeOperationCompleted == null)) {
                this.WS_InsertResuscitativeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_InsertResuscitativeOperationCompleted);
            }
            this.InvokeAsync("WS_InsertResuscitative", new object[] {
                        APP_ID,
                        DOCTOR_ID,
                        PROFILE_ID,
                        RESUSCITATIVE_SUBJECT,
                        RESUSCITATIVE_SUBJECTNAME,
                        RESUSCITATIVE_END_DATE,
                        RESUSCITATIVE_INSTITUE_NAME,
                        RESUSCITATIVE_EXPIRED_DATE,
                        RESUSCITATIVE_STATUS,
                        RESUSCITATIVE_URL}, this.WS_InsertResuscitativeOperationCompleted, userState);
        }
        
        private void OnWS_InsertResuscitativeOperationCompleted(object arg) {
            if ((this.WS_InsertResuscitativeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_InsertResuscitativeCompleted(this, new WS_InsertResuscitativeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_Country", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable WS_Country() {
            object[] results = this.Invoke("WS_Country", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void WS_CountryAsync() {
            this.WS_CountryAsync(null);
        }
        
        /// <remarks/>
        public void WS_CountryAsync(object userState) {
            if ((this.WS_CountryOperationCompleted == null)) {
                this.WS_CountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_CountryOperationCompleted);
            }
            this.InvokeAsync("WS_Country", new object[0], this.WS_CountryOperationCompleted, userState);
        }
        
        private void OnWS_CountryOperationCompleted(object arg) {
            if ((this.WS_CountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_CountryCompleted(this, new WS_CountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_InsertOrientation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int WS_InsertOrientation(int APP_ID, string PROFILE_ID, string ORIENTATION_DATE, string ORIENTATION_RESULT, string ORIENTATION_STATUS) {
            object[] results = this.Invoke("WS_InsertOrientation", new object[] {
                        APP_ID,
                        PROFILE_ID,
                        ORIENTATION_DATE,
                        ORIENTATION_RESULT,
                        ORIENTATION_STATUS});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void WS_InsertOrientationAsync(int APP_ID, string PROFILE_ID, string ORIENTATION_DATE, string ORIENTATION_RESULT, string ORIENTATION_STATUS) {
            this.WS_InsertOrientationAsync(APP_ID, PROFILE_ID, ORIENTATION_DATE, ORIENTATION_RESULT, ORIENTATION_STATUS, null);
        }
        
        /// <remarks/>
        public void WS_InsertOrientationAsync(int APP_ID, string PROFILE_ID, string ORIENTATION_DATE, string ORIENTATION_RESULT, string ORIENTATION_STATUS, object userState) {
            if ((this.WS_InsertOrientationOperationCompleted == null)) {
                this.WS_InsertOrientationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_InsertOrientationOperationCompleted);
            }
            this.InvokeAsync("WS_InsertOrientation", new object[] {
                        APP_ID,
                        PROFILE_ID,
                        ORIENTATION_DATE,
                        ORIENTATION_RESULT,
                        ORIENTATION_STATUS}, this.WS_InsertOrientationOperationCompleted, userState);
        }
        
        private void OnWS_InsertOrientationOperationCompleted(object arg) {
            if ((this.WS_InsertOrientationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_InsertOrientationCompleted(this, new WS_InsertOrientationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_InsertCME", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int WS_InsertCME(int APP_ID, string DOCTOR_ID, string PROFILE_ID, string CME_SUBJECT, string CME_DATE, string CME_TYPE, string CME_INSTITUTE_NAME, string CME_SCORE, string CME_EXPIRATION_DATE, string CME_FILE_PATH, string CME_FILE_TYPE, string CME_STATUS, string CME_URL) {
            object[] results = this.Invoke("WS_InsertCME", new object[] {
                        APP_ID,
                        DOCTOR_ID,
                        PROFILE_ID,
                        CME_SUBJECT,
                        CME_DATE,
                        CME_TYPE,
                        CME_INSTITUTE_NAME,
                        CME_SCORE,
                        CME_EXPIRATION_DATE,
                        CME_FILE_PATH,
                        CME_FILE_TYPE,
                        CME_STATUS,
                        CME_URL});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void WS_InsertCMEAsync(int APP_ID, string DOCTOR_ID, string PROFILE_ID, string CME_SUBJECT, string CME_DATE, string CME_TYPE, string CME_INSTITUTE_NAME, string CME_SCORE, string CME_EXPIRATION_DATE, string CME_FILE_PATH, string CME_FILE_TYPE, string CME_STATUS, string CME_URL) {
            this.WS_InsertCMEAsync(APP_ID, DOCTOR_ID, PROFILE_ID, CME_SUBJECT, CME_DATE, CME_TYPE, CME_INSTITUTE_NAME, CME_SCORE, CME_EXPIRATION_DATE, CME_FILE_PATH, CME_FILE_TYPE, CME_STATUS, CME_URL, null);
        }
        
        /// <remarks/>
        public void WS_InsertCMEAsync(int APP_ID, string DOCTOR_ID, string PROFILE_ID, string CME_SUBJECT, string CME_DATE, string CME_TYPE, string CME_INSTITUTE_NAME, string CME_SCORE, string CME_EXPIRATION_DATE, string CME_FILE_PATH, string CME_FILE_TYPE, string CME_STATUS, string CME_URL, object userState) {
            if ((this.WS_InsertCMEOperationCompleted == null)) {
                this.WS_InsertCMEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_InsertCMEOperationCompleted);
            }
            this.InvokeAsync("WS_InsertCME", new object[] {
                        APP_ID,
                        DOCTOR_ID,
                        PROFILE_ID,
                        CME_SUBJECT,
                        CME_DATE,
                        CME_TYPE,
                        CME_INSTITUTE_NAME,
                        CME_SCORE,
                        CME_EXPIRATION_DATE,
                        CME_FILE_PATH,
                        CME_FILE_TYPE,
                        CME_STATUS,
                        CME_URL}, this.WS_InsertCMEOperationCompleted, userState);
        }
        
        private void OnWS_InsertCMEOperationCompleted(object arg) {
            if ((this.WS_InsertCMECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_InsertCMECompleted(this, new WS_InsertCMECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_InsertMOC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int WS_InsertMOC(int APP_ID, string DOCTOR_ID, string PROFILE_ID, int MOC_TYPE_ID, string MOC_TOPIC_NAME, int MOC_COUNTRY_ID, string MOC_COUNTRY, string MOC_FROM, string MOC_START_DATE, string MOC_END_DATE, string MOC_VERIFY_STATUS, string MOC_STATUS, float MOC_SCORE, string MOC_URL) {
            object[] results = this.Invoke("WS_InsertMOC", new object[] {
                        APP_ID,
                        DOCTOR_ID,
                        PROFILE_ID,
                        MOC_TYPE_ID,
                        MOC_TOPIC_NAME,
                        MOC_COUNTRY_ID,
                        MOC_COUNTRY,
                        MOC_FROM,
                        MOC_START_DATE,
                        MOC_END_DATE,
                        MOC_VERIFY_STATUS,
                        MOC_STATUS,
                        MOC_SCORE,
                        MOC_URL});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void WS_InsertMOCAsync(int APP_ID, string DOCTOR_ID, string PROFILE_ID, int MOC_TYPE_ID, string MOC_TOPIC_NAME, int MOC_COUNTRY_ID, string MOC_COUNTRY, string MOC_FROM, string MOC_START_DATE, string MOC_END_DATE, string MOC_VERIFY_STATUS, string MOC_STATUS, float MOC_SCORE, string MOC_URL) {
            this.WS_InsertMOCAsync(APP_ID, DOCTOR_ID, PROFILE_ID, MOC_TYPE_ID, MOC_TOPIC_NAME, MOC_COUNTRY_ID, MOC_COUNTRY, MOC_FROM, MOC_START_DATE, MOC_END_DATE, MOC_VERIFY_STATUS, MOC_STATUS, MOC_SCORE, MOC_URL, null);
        }
        
        /// <remarks/>
        public void WS_InsertMOCAsync(int APP_ID, string DOCTOR_ID, string PROFILE_ID, int MOC_TYPE_ID, string MOC_TOPIC_NAME, int MOC_COUNTRY_ID, string MOC_COUNTRY, string MOC_FROM, string MOC_START_DATE, string MOC_END_DATE, string MOC_VERIFY_STATUS, string MOC_STATUS, float MOC_SCORE, string MOC_URL, object userState) {
            if ((this.WS_InsertMOCOperationCompleted == null)) {
                this.WS_InsertMOCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_InsertMOCOperationCompleted);
            }
            this.InvokeAsync("WS_InsertMOC", new object[] {
                        APP_ID,
                        DOCTOR_ID,
                        PROFILE_ID,
                        MOC_TYPE_ID,
                        MOC_TOPIC_NAME,
                        MOC_COUNTRY_ID,
                        MOC_COUNTRY,
                        MOC_FROM,
                        MOC_START_DATE,
                        MOC_END_DATE,
                        MOC_VERIFY_STATUS,
                        MOC_STATUS,
                        MOC_SCORE,
                        MOC_URL}, this.WS_InsertMOCOperationCompleted, userState);
        }
        
        private void OnWS_InsertMOCOperationCompleted(object arg) {
            if ((this.WS_InsertMOCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_InsertMOCCompleted(this, new WS_InsertMOCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_InsertMOC2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int WS_InsertMOC2(int APP_ID, string DOCTOR_ID, string PROFILE_ID, int MOC_TYPE_ID, string MOC_TOPIC_NAME, int MOC_COUNTRY_ID, string MOC_COUNTRY, string MOC_FROM, string MOC_START_DATE, string MOC_END_DATE, string MOC_VERIFY_STATUS, string MOC_STATUS, float MOC_SCORE, string MOC_URL) {
            object[] results = this.Invoke("WS_InsertMOC2", new object[] {
                        APP_ID,
                        DOCTOR_ID,
                        PROFILE_ID,
                        MOC_TYPE_ID,
                        MOC_TOPIC_NAME,
                        MOC_COUNTRY_ID,
                        MOC_COUNTRY,
                        MOC_FROM,
                        MOC_START_DATE,
                        MOC_END_DATE,
                        MOC_VERIFY_STATUS,
                        MOC_STATUS,
                        MOC_SCORE,
                        MOC_URL});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void WS_InsertMOC2Async(int APP_ID, string DOCTOR_ID, string PROFILE_ID, int MOC_TYPE_ID, string MOC_TOPIC_NAME, int MOC_COUNTRY_ID, string MOC_COUNTRY, string MOC_FROM, string MOC_START_DATE, string MOC_END_DATE, string MOC_VERIFY_STATUS, string MOC_STATUS, float MOC_SCORE, string MOC_URL) {
            this.WS_InsertMOC2Async(APP_ID, DOCTOR_ID, PROFILE_ID, MOC_TYPE_ID, MOC_TOPIC_NAME, MOC_COUNTRY_ID, MOC_COUNTRY, MOC_FROM, MOC_START_DATE, MOC_END_DATE, MOC_VERIFY_STATUS, MOC_STATUS, MOC_SCORE, MOC_URL, null);
        }
        
        /// <remarks/>
        public void WS_InsertMOC2Async(int APP_ID, string DOCTOR_ID, string PROFILE_ID, int MOC_TYPE_ID, string MOC_TOPIC_NAME, int MOC_COUNTRY_ID, string MOC_COUNTRY, string MOC_FROM, string MOC_START_DATE, string MOC_END_DATE, string MOC_VERIFY_STATUS, string MOC_STATUS, float MOC_SCORE, string MOC_URL, object userState) {
            if ((this.WS_InsertMOC2OperationCompleted == null)) {
                this.WS_InsertMOC2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnWS_InsertMOC2OperationCompleted);
            }
            this.InvokeAsync("WS_InsertMOC2", new object[] {
                        APP_ID,
                        DOCTOR_ID,
                        PROFILE_ID,
                        MOC_TYPE_ID,
                        MOC_TOPIC_NAME,
                        MOC_COUNTRY_ID,
                        MOC_COUNTRY,
                        MOC_FROM,
                        MOC_START_DATE,
                        MOC_END_DATE,
                        MOC_VERIFY_STATUS,
                        MOC_STATUS,
                        MOC_SCORE,
                        MOC_URL}, this.WS_InsertMOC2OperationCompleted, userState);
        }
        
        private void OnWS_InsertMOC2OperationCompleted(object arg) {
            if ((this.WS_InsertMOC2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WS_InsertMOC2Completed(this, new WS_InsertMOC2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_GetProfileCompletedEventHandler(object sender, WS_GetProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_GetProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_GetProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_GetJobCompletedEventHandler(object sender, WS_GetJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_GetJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_GetJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_GetAddressCompletedEventHandler(object sender, WS_GetAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_GetAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_GetAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_GetBankInfoCompletedEventHandler(object sender, WS_GetBankInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_GetBankInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_GetBankInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_GetMedical_PlanCompletedEventHandler(object sender, WS_GetMedical_PlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_GetMedical_PlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_GetMedical_PlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_GetPhoneCompletedEventHandler(object sender, WS_GetPhoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_GetPhoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_GetPhoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_InsertCertCompletedEventHandler(object sender, WS_InsertCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_InsertCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_InsertCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_InsertResuscitativeCompletedEventHandler(object sender, WS_InsertResuscitativeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_InsertResuscitativeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_InsertResuscitativeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_CountryCompletedEventHandler(object sender, WS_CountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_CountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_CountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_InsertOrientationCompletedEventHandler(object sender, WS_InsertOrientationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_InsertOrientationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_InsertOrientationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_InsertCMECompletedEventHandler(object sender, WS_InsertCMECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_InsertCMECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_InsertCMECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_InsertMOCCompletedEventHandler(object sender, WS_InsertMOCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_InsertMOCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_InsertMOCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WS_InsertMOC2CompletedEventHandler(object sender, WS_InsertMOC2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WS_InsertMOC2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WS_InsertMOC2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591